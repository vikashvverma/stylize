[{"/Users/vikash/exp/github/stylised-frontend/src/reportWebVitals.js":"1","/Users/vikash/exp/github/stylised-frontend/src/Components/App/App.js":"2","/Users/vikash/exp/github/stylised-frontend/src/theme.js":"3","/Users/vikash/exp/github/stylised-frontend/src/index.js":"4"},{"size":362,"mtime":1607764398391,"results":"5","hashOfConfig":"6"},{"size":7006,"mtime":1607872754470,"results":"7","hashOfConfig":"6"},{"size":907,"mtime":1607765378100,"results":"8","hashOfConfig":"6"},{"size":584,"mtime":1607764896670,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1o8sibt",{"filePath":"12","messages":"13","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/vikash/exp/github/stylised-frontend/src/reportWebVitals.js",[],"/Users/vikash/exp/github/stylised-frontend/src/Components/App/App.js",["19","20","21","22","23","24","25","26","27","28"],"import logo from '../../logo.svg';\nimport '../../App.css';\nimport Container from \"@material-ui/core/Container\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {PhotoCamera} from \"@material-ui/icons\";\nimport {useEffect, useState} from \"react\";\nimport React from 'react';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport * as axios from \"axios\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Divider from \"@material-ui/core/Divider\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n    },\n    input: {\n        display: 'none',\n    },\n    media: {\n        maxWidth: 600,\n        height: 600,\n    }\n}));\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\n\nfunction App() {\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n    const [uid, setUid] = React.useState('');\n    const [message, setMessage] = React.useState(\"\");\n    const [contentImageName, setContentImageName] = useState(\"\");\n    const [contentImage, setContentImage] = useState({});\n    const [styleImage, setStyleImage] = useState({});\n    const [styleImageName, setStyleImageName] = useState(\"\");\n    const [convertedImage, setConvertedImage] = useState(\"\");\n    let intervalTime = 0;\n    const handleClick = () => {\n        setOpen(true);\n    };\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    const getImage = () => {\n        axios.get('http://157.245.111.51:9000/v1/files').then(res => {\n            if (res && res.data && res.data.data && res.data.data.images) {\n                for (let image of res.data.data.images) {\n                    if (image.uuid == uid && image.stylised) {\n                        setConvertedImage(`http://157.245.111.51:9000/${uid}/stylised-output.png`);\n                        clearInterval(intervalTime);\n                    }\n                }\n            }\n        })\n    }\n    const uploadFile = (file, fileName, type) => {\n        // Create an object of formData\n        const formData = new FormData();\n\n        // Update the formData object\n        formData.append(\n            \"file\",\n            file,\n            fileName\n        );\n\n        // Details of the uploaded file\n        console.log(file);\n        const config = {headers: {'Content-Type': 'multipart/form-data', 'uuid': uid, 'name': fileName, type}};\n        // Request made to the backend api\n        // Send formData object\n        axios.post(\"http://157.245.111.51:9000/v1/upload\", formData, config)\n            .then(function (response) {\n                console.log(response);\n                setUid(response.data.data);\n                if (type == 'style') {\n                    getImage()\n                    intervalTime = setInterval(getImage, 5000);\n                }\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n    const upload = (event) => {\n        if (!styleImageName || !contentImageName) {\n            setMessage(\"Please select content and style files!\")\n            handleClick();\n            return;\n        }\n        uploadFile(contentImage, contentImageName, 'content')\n    }\n\n    useEffect(() => {\n        if (styleImage && styleImageName) {\n            uploadFile(styleImage, styleImageName, 'style');\n        }\n    }, [uid]);\n\n    return (\n        <Container maxWidth=\"xl\" className=\"App\">\n            <Paper>\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n                    Stylize your image\n                </Typography>\n\n                <div className={classes.root}>\n                    <input accept=\"image/*\" className={classes.input} id=\"icon-content-file\" type=\"file\"\n                           onChange={(e) => {\n                               if (e.target && e.target.files && e.target.files[0]) {\n                                   setContentImageName(e.target.files[0].name)\n                                   setContentImage(e.target.files[0])\n                               }\n                           }}/>\n                    <label htmlFor=\"icon-content-file\">\n                        <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\n                            <PhotoCamera/>\n                        </IconButton>\n\n                        {contentImageName || 'Select Content Image'}\n                    </label>\n                </div>\n\n                <div className={classes.root}>\n                    <input accept=\"image/*\" className={classes.input} id=\"icon-style-file\" type=\"file\"\n                           onChange={(e) => {\n                               if (e.target && e.target.files && e.target.files[0]) {\n                                   setStyleImageName(e.target.files[0].name)\n                                   setStyleImage(e.target.files[0])\n                               }\n                           }}/>\n                    <label htmlFor=\"icon-style-file\">\n                        <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\n                            <PhotoCamera/>\n                        </IconButton>\n                        {styleImageName || 'Select Style Image'}\n                    </label>\n                </div>\n                {\n                    uid ? '' : <Button variant=\"contained\" color=\"primary\" onClick={upload} hidden={uid}>Upload</Button>\n                }\n                <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n                    <Alert onClose={handleClose} severity=\"success\">\n                        {message}\n                    </Alert>\n                </Snackbar>\n                <Divider/>\n                {uid && !convertedImage ? <CircularProgress color=\"secondary\" hidden/> : ''}\n                {uid && !convertedImage && 'Converting Image'}\n                {convertedImage && <img src={convertedImage} width=\"50%\" alt=\"logo\"/>}\n                {convertedImage && <Button onClick={() => {\n                    window.location.reload();\n                }}>Try again</Button>}\n            </Paper>\n        </Container>\n    );\n}\n\nexport default App;\n","/Users/vikash/exp/github/stylised-frontend/src/theme.js",[],"/Users/vikash/exp/github/stylised-frontend/src/index.js",[],{"ruleId":"29","severity":1,"message":"30","line":15,"column":8,"nodeType":"31","messageId":"32","endLine":15,"endColumn":12},{"ruleId":"29","severity":1,"message":"33","line":16,"column":8,"nodeType":"31","messageId":"32","endLine":16,"endColumn":22},{"ruleId":"29","severity":1,"message":"34","line":17,"column":8,"nodeType":"31","messageId":"32","endLine":17,"endColumn":17},{"ruleId":"29","severity":1,"message":"35","line":18,"column":8,"nodeType":"31","messageId":"32","endLine":18,"endColumn":19},{"ruleId":"29","severity":1,"message":"36","line":19,"column":8,"nodeType":"31","messageId":"32","endLine":19,"endColumn":19},{"ruleId":"29","severity":1,"message":"37","line":20,"column":8,"nodeType":"31","messageId":"32","endLine":20,"endColumn":12},{"ruleId":"29","severity":1,"message":"38","line":22,"column":8,"nodeType":"31","messageId":"32","endLine":22,"endColumn":22},{"ruleId":"39","severity":1,"message":"40","line":72,"column":36,"nodeType":"41","messageId":"42","endLine":72,"endColumn":38},{"ruleId":"39","severity":1,"message":"40","line":100,"column":26,"nodeType":"41","messageId":"42","endLine":100,"endColumn":28},{"ruleId":"43","severity":1,"message":"44","line":122,"column":8,"nodeType":"45","endLine":122,"endColumn":13,"suggestions":"46"},"no-unused-vars","'Card' is defined but never used.","Identifier","unusedVar","'CardActionArea' is defined but never used.","'CardMedia' is defined but never used.","'CardContent' is defined but never used.","'CardActions' is defined but never used.","'Grid' is defined but never used.","'LinearProgress' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'styleImage', 'styleImageName', and 'uploadFile'. Either include them or remove the dependency array.","ArrayExpression",["47"],{"desc":"48","fix":"49"},"Update the dependencies array to be: [styleImage, styleImageName, uid, uploadFile]",{"range":"50","text":"51"},[4121,4126],"[styleImage, styleImageName, uid, uploadFile]"]